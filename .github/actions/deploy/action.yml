name: deploy
description: deploys application

inputs:
  azure-credentials:
    required: true
  environment:
    description: Environment to deploy to
    required: true
  pr-number:
    description: PR number for the review app
    required: false
  sha:
    description: Commit sha to be deployed
    required: true
  slack-webhook:
    required: false

outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}

runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/aks/config/${{ inputs.environment }}.tfvars.json
        terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/terraform.tf | grep -o [0-9\.]*)
        echo "cluster=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "app_environment=$(jq -r '.environment' ${tf_vars_file})" >> $GITHUB_ENV
        echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV
        echo "namespace=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV
        echo "key_vault_name=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "key_vault_app_secret_name=$(jq -r '.key_vault_app_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "key_vault_infra_secret_name=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        if [ -n "${{ inputs.pr-number }}" ]; then
          APP_NAME=pr-${{ inputs.pr-number }}
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "deploy_url=https://check-childrens-barred-list-${APP_NAME}.test.teacherservices.cloud" >> $GITHUB_OUTPUT
          echo "DEPLOY_REF=${{ github.head_ref }}" >> $GITHUB_ENV
        else
          app_environment=$(jq -r '.environment' ${tf_vars_file})
          echo "DEPLOY_REF=${{ github.ref }}" >> $GITHUB_ENV
          hostname=$(jq -r '.gov_uk_host_names[0]' ${tf_vars_file})
          if [[ $hostname != null ]]; then
            echo "deploy_url=https://${hostname}" >> $GITHUB_OUTPUT
          else
            if [[ $cluster == 'production' ]]; then
              echo "deploy_url=https://check-childrens-barred-list-${aks_app_environment}.teacherservices.cloud" >> $GITHUB_OUTPUT
            else
              echo "deploy_url=https://check-childrens-barred-list-${aks_app_environment}.${cluster}.teacherservices.cloud" >> $GITHUB_OUTPUT
            fi
          fi
        fi
    - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Validate Azure Key Vault secrets
      uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
      with:
        KEY_VAULT: ${{ env.key_vault_name }}
        SECRETS: |
          ${{ env.key_vault_app_secret_name }}
          ${{ env.key_vault_infra_secret_name }}
    - uses: DFE-Digital/github-actions/set-arm-environment-variables@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}

    - name: Terraform init, plan & apply
      shell: bash
      run: make ${{ inputs.environment }} ci terraform-apply
      env:
        IMAGE_TAG: ${{ inputs.sha }}
        APP_NAME: ${{ env.APP_NAME }}
        TF_VAR_azure_sp_credentials: ${{ inputs.azure-credentials }}
        CONFIRM_PRODUCTION: true

    - name: Set up environment variables
      shell: bash
      run: |
        case ${{ env.cluster }} in
          test)
            echo "cluster_rg=s189t01-tsc-ts-rg" >> $GITHUB_ENV
            echo "cluster_name=s189t01-tsc-test-aks" >> $GITHUB_ENV
            ;;
          production)
            echo "cluster_rg=s189p01-tsc-pd-rg" >> $GITHUB_ENV
            echo "cluster_name=s189p01-tsc-production-aks" >> $GITHUB_ENV
            ;;
          *)
            echo "unknown cluster"
            ;;
        esac
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: "v1.26.1" # default is latest stable

    - name: K8 setup
      shell: bash
      run: |
        az aks get-credentials -g ${{ env.cluster_rg }} -n ${{ env.cluster_name }}
        make install-konduit
