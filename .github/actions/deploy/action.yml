name: deploy
description: deploys application

inputs:
  azure-client-id:
    description: Managed identity client ID
    required: true
  azure-subscription-id:
    description: Azure subscription ID
    required: true
  azure-tenant-id:
    description: Azure tenant ID
    required: true
  environment:
    description: Environment to deploy to
    required: true
  pr-number:
    description: PR number for the review app
    required: false
  sha:
    description: Commit sha to be deployed
    required: true
  slack-webhook:
    required: false

outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}

runs:
  using: composite
  steps:
    - name: Set environment variables
      id: set_env_var
      shell: bash
      env:
        TFVARS: aks/config/${{ inputs.environment }}.tfvars.json
      working-directory: terraform
      run: |
        terraform_version=$(awk '/{/{f=/^terraform/;next}f' aks/terraform.tf | grep -o [0-9\.]*)
        echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV

        echo "cluster=$(jq -r '.cluster' $TFVARS)" >> $GITHUB_ENV
        echo "app_environment=$(jq -r '.environment' $TFVARS)" >> $GITHUB_ENV
        echo "namespace=$(jq -r '.namespace' $TFVARS)" >> $GITHUB_ENV

        if [ -n "${{ inputs.pr-number }}" ]; then
          APP_NAME=pr-${{ inputs.pr-number }}
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          DEPLOY_REF=${{ github.head_ref }}
          DEPLOY_URL=https://check-childrens-barred-list-${APP_NAME}.test.teacherservices.cloud
        else
          DEPLOY_REF=${{ github.ref }}
          HOSTNAME=$(jq -r '.gov_uk_host_names[0]' ${tf_vars_file})

          if [[ $HOSTNAME != null ]]; then
            DEPLOY_URL=https://${HOSTNAME}
          else
            if [[ $cluster == 'production' ]]; then
              DEPLOY_URL=https://check-childrens-barred-list-${aks_app_environment}.teacherservices.cloud
            else
              DEPLOY_URL=https://check-childrens-barred-list-${aks_app_environment}.${cluster}.teacherservices.cloud
            fi
          fi
        fi

        echo "deloy_ref=$DEPLOY_REF" >> $GITHUB_ENV
        echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

    - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # Pinned at v2.0.3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - uses: google-github-actions/auth@v2
      with:
        project_id: teaching-qualifications
        workload_identity_provider: projects/708780292301/locations/global/workloadIdentityPools/check-childrens-barred-list/providers/check-childrens-barred-list

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Terraform init, plan & apply
      shell: bash
      run: make ${{ inputs.environment }} ci terraform-apply
      env:
        IMAGE_TAG: ${{ inputs.sha }}
        APP_NAME: ${{ env.APP_NAME }}
        CONFIRM_PRODUCTION: true

    - name: Set cluster environment variables
      shell: bash
      env:
        TFVARS: aks/config/${{ inputs.environment }}.tfvars.json
      working-directory: terraform
      run: |
        echo "cluster_rg=$(jq -r '.cluster_rg' $TFVARS)" >> $GITHUB_ENV
        echo "cluster_name=$(jq -r '.cluster_name' $TFVARS)" >> $GITHUB_ENV

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - name: K8 setup
      shell: bash
      run: |
        make ${{ inputs.environment }} get-cluster-credentials APP_NAME=${APP_NAME}
        make install-konduit

    - name: Generate example data
      shell: bash
      if: inputs.environment == 'review'
      run: kubectl exec -n ${{ env.namespace }} deployment/check-childrens-barred-list-${APP_NAME} -- /bin/sh -c "cd /app && bundle exec rails example_data:generate"
