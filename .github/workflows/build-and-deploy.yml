name: Build and Deploy
concurrency: build_and_deploy_${{ github.ref_name }}

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize, labeled]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        type: choice
        options:
          - test
          - preproduction
          - production

permissions:
  contents: write
  deployments: write
  packages: write
  pull-requests: write
  id-token: write

jobs:
  build:
    name: Build
    env:
      DOCKER_IMAGE: ghcr.io/dfe-digital/check-childrens-barred-list
    outputs:
      docker_image: ${{ env.DOCKER_IMAGE }}
      image_tag: ${{ env.IMAGE_TAG }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        name: Checkout

      - name: Build and push docker image
        id: build-image
        uses: DFE-Digital/github-actions/build-docker-image@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: ""
          snyk-token: ${{ secrets.SNYK_TOKEN }}
          max-cache: true

  deploy_review_app:
    name: Deployment To Review
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    needs: [build]
    runs-on: ubuntu-latest
    environment: review
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy App to Review
        id: deploy_review
        uses: ./.github/actions/deploy/
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          environment: review
          pr-number: ${{ github.event.pull_request.number }}
          sha: ${{ needs.build.outputs.IMAGE_TAG }}

      - name: Post sticky pull request comment
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: review-app
          message: |
            ### Review App Deployed

            | Environment | URL |
            | --- | --- |
            | review-${{ github.event.pull_request.number }} | ${{ steps.deploy_review.outputs.deploy-url }} |

            The review app has been successfully deployed and is ready for testing.

  set_matrix:
    name: Set deployment matrix
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      deployment_matrix: ${{ steps.set_matrix.outputs.deployment_matrix }}
    steps:
      - id: set_matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            DEPLOYMENT_MATRIX="{ 'environment': ['${{ github.event.inputs.environment }}'] }"
          else
            DEPLOYMENT_MATRIX="{ 'environment': ['test', 'preproduction'] }"
          fi
          echo "deployment_matrix=$DEPLOYMENT_MATRIX" >> $GITHUB_OUTPUT

  deploy_nonprod:
    name: Deploy to ${{ matrix.environment }} environment
    runs-on: ubuntu-latest
    needs: [build, set_matrix]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    concurrency: deploy_${{ matrix.environment }}
    strategy:
      fail-fast: false # this is necessary to prevent early terminiation of terraform deployments that will result in tfstate locks
      max-parallel: 3
      matrix: ${{ fromJson(needs.set_matrix.outputs.deployment_matrix) }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      environment_name: ${{ matrix.environment }}
      environment_url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/deploy/
        id: deploy
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          environment: ${{ matrix.environment }}
          sha: ${{ needs.build.outputs.IMAGE_TAG }}

  deploy_production:
    name: Deploy to production AKS environment
    needs: [build, deploy_nonprod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    concurrency: deploy_production

    steps:
      - uses: actions/checkout@v5

      - uses: ./.github/actions/deploy
        id: deploy
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          environment: production
          sha: ${{ needs.build.outputs.IMAGE_TAG }}

  notify_slack_of_failures:
    name: Notify Slack of failures
    runs-on: ubuntu-latest
    needs:
      [build, deploy_review_app, set_matrix, deploy_nonprod, deploy_production]
    environment: ${{ needs.deploy_nonprod.outputs.environment_name || 'test'  }}
    env:
      ENVIRONMENT_NAME: ${{ needs.deploy_nonprod.outputs.environment_name || 'test'  }}
    if: failure()
    steps:
      - uses: actions/checkout@v5

      - name: Set Environment variables
        shell: bash
        working-directory: terraform
        run: |
          if ${{ needs.build_image.result == 'failure' }}
          then
            job=build_image
          elif ${{ needs.deploy_review_app.result == 'failure' }}
          then
            job=deploy_review_app
            review=true
          elif ${{ needs.set_matrix.result == 'failure' }}
          then
            job=set_matrix
          elif ${{ needs.deploy_nonprod.result == 'failure' }}
          then
            job=deploy_nonprod
          elif ${{ needs.deploy_production.result == 'failure' }}
          then
            job=deploy_production
          fi

          tf_vars_file=aks/config/${{ env.ENVIRONMENT_NAME }}.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "JOB=${job}" >> $GITHUB_ENV
          echo "REVIEW=${review}" >> $GITHUB_ENV

      - uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id: get_monitoring_secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}
          key: SLACK_WEBHOOK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack channel on job failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Deployment of check-the-childrens-barred-list ${{ env.REVIEW && 'review' }} failed
          SLACK_MESSAGE: Job ${{ env.JOB }} failed
          SLACK_WEBHOOK: ${{ steps.get_monitoring_secret.outputs.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from Build and Deploy workflow

  deploy_domains_infra:
    name: Deploy Domains Infrastructure
    needs: [deploy_production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_production
    environment:
      name: production
    permissions:
      id-token: write

    steps:
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}

      - name: Deploy Domains Infrastructure
        id: deploy_domains_infra
        uses: DFE-Digital/github-actions/deploy-domains-infra@master
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-base: "terraform/custom_domains/infrastructure"

  deploy_domains_env:
    name: Deploy Domains to ${{ matrix.domain_environment }} environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.domain_environment }}
    needs: [deploy_domains_infra]
    strategy:
      max-parallel: 1
      matrix:
        domain_environment: [test, preproduction, production]
    environment:
      name: production
    permissions:
      id-token: write

    steps:
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}

      - name: Deploy Domains Environment
        id: deploy_domains_env
        uses: DFE-Digital/github-actions/deploy-domains-env@master
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID  }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID   }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
          environment: ${{ matrix.domain_environment }}
          healthcheck: healthcheck
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-base: "terraform/custom_domains/environment_domains"
